name: API Test with Curl

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    environment: Production
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Flask Flask-PyMongo Flask-JWT-Extended Flask-Bcrypt Flask-Cors pytest python-dotenv

      - name: Set environment variables from secrets
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV

      - name: Start Flask server
        env:
          FLASK_APP: app.py
          FLASK_RUN_HOST: 0.0.0.0
          FLASK_RUN_PORT: 5000
        run: |
          flask run &  # Start Flask in the background
          sleep 20     # Increase to ensure server is ready

      # 1) Test Registration
      - name: Test registration endpoint
        run: |
          curl --fail --show-error --verbose \
          -X POST http://127.0.0.1:5000/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"name":"Test","last_name":"User","age":30,"phone":"1234567890","email":"testuser@example.com","password":"password123"}'

      # 2) Test Login
      - name: Test login endpoint
        run: |
          curl --fail --show-error --verbose \
          -X POST http://127.0.0.1:5000/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"testuser@example.com","password":"password123"}'

      # 3) Test Forgot Password (Existing User)
      - name: Test forgot password (existing user)
        run: |
          curl --fail --show-error --verbose \
          -X POST http://127.0.0.1:5000/api/auth/forgot-password \
          -H "Content-Type: application/json" \
          -d '{"email":"testuser@example.com"}'

      # 4) Test Forgot Password (Non-existing User)
      - name: Test forgot password (non-existing user)
        run: |
          # Expect a 404, so don't use --fail (or handle with "|| echo ..." approach)
          curl --show-error --verbose \
          -X POST http://127.0.0.1:5000/api/auth/forgot-password \
          -H "Content-Type: application/json" \
          -d '{"email":"notfound@example.com"}' || echo "Expected 404 - user not found"

      # 5) Test Reset Password (Invalid Token)
      - name: Test reset password (invalid token)
        run: |
          # Expect a 400, so handle with "|| echo..."
          curl --show-error --verbose \
          -X POST http://127.0.0.1:5000/api/auth/reset-password \
          -H "Content-Type: application/json" \
          -d '{"token":"fake_token","password":"NewPass123"}' || echo "Expected 400 - invalid token"
